/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/xmudrii/certs-controller/pkg/apis/certs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CABundleLister helps list CABundles.
type CABundleLister interface {
	// List lists all CABundles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CABundle, err error)
	// CABundles returns an object that can list and get CABundles.
	CABundles(namespace string) CABundleNamespaceLister
	CABundleListerExpansion
}

// cABundleLister implements the CABundleLister interface.
type cABundleLister struct {
	indexer cache.Indexer
}

// NewCABundleLister returns a new CABundleLister.
func NewCABundleLister(indexer cache.Indexer) CABundleLister {
	return &cABundleLister{indexer: indexer}
}

// List lists all CABundles in the indexer.
func (s *cABundleLister) List(selector labels.Selector) (ret []*v1alpha1.CABundle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CABundle))
	})
	return ret, err
}

// CABundles returns an object that can list and get CABundles.
func (s *cABundleLister) CABundles(namespace string) CABundleNamespaceLister {
	return cABundleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CABundleNamespaceLister helps list and get CABundles.
type CABundleNamespaceLister interface {
	// List lists all CABundles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CABundle, err error)
	// Get retrieves the CABundle from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CABundle, error)
	CABundleNamespaceListerExpansion
}

// cABundleNamespaceLister implements the CABundleNamespaceLister
// interface.
type cABundleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CABundles in the indexer for a given namespace.
func (s cABundleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CABundle, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CABundle))
	})
	return ret, err
}

// Get retrieves the CABundle from the indexer for a given namespace and name.
func (s cABundleNamespaceLister) Get(name string) (*v1alpha1.CABundle, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cabundle"), name)
	}
	return obj.(*v1alpha1.CABundle), nil
}
