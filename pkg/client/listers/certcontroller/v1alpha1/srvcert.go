/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/xmudrii/certs-controller/pkg/apis/certcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SrvCertLister helps list SrvCerts.
type SrvCertLister interface {
	// List lists all SrvCerts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SrvCert, err error)
	// SrvCerts returns an object that can list and get SrvCerts.
	SrvCerts(namespace string) SrvCertNamespaceLister
	SrvCertListerExpansion
}

// srvCertLister implements the SrvCertLister interface.
type srvCertLister struct {
	indexer cache.Indexer
}

// NewSrvCertLister returns a new SrvCertLister.
func NewSrvCertLister(indexer cache.Indexer) SrvCertLister {
	return &srvCertLister{indexer: indexer}
}

// List lists all SrvCerts in the indexer.
func (s *srvCertLister) List(selector labels.Selector) (ret []*v1alpha1.SrvCert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SrvCert))
	})
	return ret, err
}

// SrvCerts returns an object that can list and get SrvCerts.
func (s *srvCertLister) SrvCerts(namespace string) SrvCertNamespaceLister {
	return srvCertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SrvCertNamespaceLister helps list and get SrvCerts.
type SrvCertNamespaceLister interface {
	// List lists all SrvCerts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SrvCert, err error)
	// Get retrieves the SrvCert from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SrvCert, error)
	SrvCertNamespaceListerExpansion
}

// srvCertNamespaceLister implements the SrvCertNamespaceLister
// interface.
type srvCertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SrvCerts in the indexer for a given namespace.
func (s srvCertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SrvCert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SrvCert))
	})
	return ret, err
}

// Get retrieves the SrvCert from the indexer for a given namespace and name.
func (s srvCertNamespaceLister) Get(name string) (*v1alpha1.SrvCert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("srvcert"), name)
	}
	return obj.(*v1alpha1.SrvCert), nil
}
